{"version":3,"sources":["atom/container/index.tsx","common/colors.ts","atom/code/index.tsx","page/home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","backgroundColor","padding","minHeight","container","marginTop","marginBottom","C","props","classes","Container","maxWidth","className","Paper","elevation","children","CodeBlock","content","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAOMA,EAAYC,YAAW,CACzBC,KAAM,CACFC,gBCRqB,yBDSrBC,QAAS,cACTC,UAAW,QAEfC,UAAW,CACPC,UAAW,KACXC,aAAc,QA4BPC,EApBa,SAACC,GACzB,IAAMC,EAAUX,IAEhB,OACI,oCACA,kBAACY,EAAA,EAAD,CACIC,SAAS,KACTC,UAAWH,EAAQL,WAEnB,kBAACS,EAAA,EAAD,CACID,UAAWH,EAAQT,KACnBc,UAAW,GAEVN,EAAMO,UAAY,yCEnBpBC,G,MAV6B,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC1C,OACI,oCACI,yBAAKL,UAAU,cACVK,MCaFC,EAZF,WACT,OACI,oCACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CACID,QAVA,4CCMLE,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef22a0bb.chunk.js","sourcesContent":["import React from 'react';\n\nimport {COLOR_LEVEL_2} from '../../common/colors';\n\nimport Container from '@material-ui/core/Container';\nimport { makeStyles, Paper } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor: COLOR_LEVEL_2,\n        padding: '1% 1% 1% 1%',\n        minHeight: '99vh'\n    },\n    container: {\n        marginTop: '1%',\n        marginBottom: '1%',\n    }\n})\n\ninterface CProps {\n    children?: React.ReactNode;\n}\n\nconst C: React.FC<CProps> = (props) => {\n    const classes = useStyles();\n\n    return (\n        <>\n        <Container \n            maxWidth=\"lg\"\n            className={classes.container}\n        >\n            <Paper\n                className={classes.root}\n                elevation={3}\n            >\n                {props.children || <></>}\n            </Paper>\n        </Container>\n        </>\n    )\n}\n\nexport default C;","export const COLOR_LEVEL_1 = 'hsla(220, 54%, 25%, 1)';\nexport const COLOR_LEVEL_2 = 'hsla(214, 61%, 31%, 1)';\nexport const COLOR_LEVEL_3 = 'hsla(208, 46%, 40%, 1)';\nexport const COLOR_LEVEL_4 = 'hsla(213, 48%, 58%, 1)';\nexport const COLOR_LEVEL_5 = 'hsla(213, 30%, 62%, 1)';\n","import React from 'react';\nimport './index.css';\n\ninterface CodeBlockProps {\n    content: string;\n}\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({content}) => {\n    return (\n        <>\n            <pre className=\"code_block\">\n                {content}\n            </pre>\n        </>\n    )\n}\n\nexport default CodeBlock;","import React from 'react';\n\nimport Container from '@material-ui/core/Container';\n\nimport C from '../../atom/container';\nimport CodeBlock from '../../atom/code';\n\nconst HELLO_WORLD_GO = `\n    fmt.Println(\"Hello world\")\n\n`\n\nconst Home = () => {\n    return (\n        <>\n            <C>\n                <CodeBlock\n                    content = {HELLO_WORLD_GO}\n                ></CodeBlock>\n            </C>\n        </>\n    );\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './page/home';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}